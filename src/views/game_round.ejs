<!-- src/views/game_round.ejs - Simple fix version -->
<% layout('layout', { css: ['game_round'] }) %>
<div class="game-container">
  <h2 class="text-center mb-4" id="game_status">
    <% if (gameData.status === 'waiting') { %>
      Game Lobby
    <% } else { %>
      Game Round <%= gameData.currentRound %>
    <% } %>
  </h2>
  
  <!-- Elimination Message Overlay -->
  <div id="elimination-overlay" class="elimination-overlay" style="display: none;">
    <div class="elimination-message">
      <div class="elimination-icon">
        <i class="fas fa-skull-crossbones"></i>
      </div>
      <h2>YOU HAVE BEEN ELIMINATED!</h2>
      <p id="elimination-reason">You received the most votes this round.</p>
      <div class="elimination-timer">
        <p>Returning to dashboard in <span id="countdown">5</span> seconds...</p>
        <button onclick="window.location.href='/dashboard'" class="btn btn-primary">
          Return to Dashboard Now
        </button>
      </div>
    </div>
  </div>

  <div id="status" class="alert alert-warning text-center" style="display: none;"></div>
  <div id="game-over-message" class="alert alert-success text-center" style="display: none; font-size: 1.5rem;"></div>
  
  <% if (gameData.status === 'waiting') { %>
    <div class="alert alert-info mb-4" id="Player_word">
      <h4 class="alert-heading">Waiting for game to start</h4>
      <p>The host will start the game once all players have joined.</p>
      <p class="mb-0">Game Code: <strong><%= gameData.code %></strong></p>
    </div>
   
    <h3>Players in Lobby</h3>
    <div class="row">
      <% gameData.players.forEach(player => { %>
        <div class="col-md-4 mb-3" id="<%= player.username %>">
          <div class="player-card">
            <h4><%= player.username %></h4>
            <% if (player.userId.toString() === gameData.players[0].userId.toString()) { %>
              <span class="badge badge-primary">Host</span>
            <% } %>
            <% if (player.userId.toString() !== userId.toString()) { %>
              <form class="Elimi-form">
                <input type="hidden" name="votedForId" value="<%= player.username %>">
                <button type="submit" class="vote-btn btn btn-danger btn-block" disabled>Vote to Eliminate</button>
              </form>
            <% } %>
          </div>
        </div>
      <% }) %>
    </div>
    <script>
      const container = document.getElementById(`${sessionStorage.getItem('username')}`);
      const form = container.querySelector(".Elimi-form");
      if (form) form.remove();
    </script>
   
    <% if (isHost) { %>
      <div class="alert alert-secondary mt-4 text-center" id="clue_cont">
        <form action="/start-game-round" method="POST" id="start_form">
          <input type="hidden" name="gameId" value="<%= gameData._id %>">
          <button type="submit" class="control-btn btn btn-primary btn-lg" id="start_btn">Start Game</button>
        </form>
      </div>
      <script>
        document.getElementById("start_form").addEventListener("submit", function(event) {
          event.preventDefault();
          socket.emit('start');
        });
      </script>
      <div id="Clues"></div>
    <% } else { %>
      <div class="alert alert-secondary mt-4 text-center" id="clue_cont">
        <p class="mb-0">Waiting for the host to start the game...</p>
      </div>
      <div id="Clues"></div>
    <% } %>
  <% } else { %>
    <% if (userId && gameData.players) { %>
      <% const currentPlayer = gameData.players.find(p => p.userId.toString() === userId) %>
      <% if (currentPlayer && !currentPlayer.isEliminated) { %>
        <div class="player-info alert alert-info mb-4">
          <p><strong>Your Role:</strong> <%= currentPlayer.role.charAt(0).toUpperCase() + currentPlayer.role.slice(1) %></p>
          <% if (currentPlayer.word) { %>
            <p class="mb-0"><strong>Your Word:</strong> <%= currentPlayer.word %></p>
          <% } else if (currentPlayer.role === 'mrwhite') { %>
            <p class="mb-0"><strong>You are Mr. White!</strong> You don't know the word. Try to guess it from other players' descriptions.</p>
          <% } %>
        </div>
      <% } else if (currentPlayer && currentPlayer.isEliminated) { %>
        <div class="alert alert-danger mb-4">
          <h4><i class="fas fa-skull-crossbones"></i> You have been eliminated!</h4>
          <p>You were eliminated in Round <%= currentPlayer.eliminatedInRound %>.</p>
          <p><a href="/dashboard" class="btn btn-primary">Return to Dashboard</a></p>
        </div>
      <% } %>
    <% } %>
    
    <% if (gameData.eliminatedPlayers && gameData.eliminatedPlayers.length > 0) { %>
      <div class="eliminated-container mb-4">
        <h3>Eliminated Players</h3>
        <div class="row">
          <% gameData.eliminatedPlayers.forEach(player => { %>
            <div class="col-md-4 mb-3">
              <div class="eliminated-card">
                <h4><%= player.username %></h4>
                <p>Role: <%= player.role.charAt(0).toUpperCase() + player.role.slice(1) %></p>
                <p class="mb-0">Eliminated in Round: <%= player.round %></p>
              </div>
            </div>
          <% }) %>
        </div>
      </div>
    <% } %>
    
    <!-- Active Players Section -->
    <% const activePlayers = gameData.players.filter(p => !p.isEliminated) %>
    <% const currentUserActive = activePlayers.find(p => p.userId.toString() === userId) %>
    
    <% if (currentUserActive) { %>
      <h3>Active Players</h3>
      <div class="row" id="active-players">
        <% activePlayers.forEach(player => { %>
          <div class="col-md-4 mb-3" id="<%= player.username %>">
            <div class="player-card">
              <h4><%= player.username %></h4>
              <% if (player.userId.toString() === gameData.players[0].userId.toString()) { %>
                <span class="badge badge-primary">Host</span>
              <% } %>
              <% if (player.userId.toString() !== userId.toString()) { %>
                <form class="Elimi-form">
                  <input type="hidden" name="votedForId" value="<%= player.username %>">
                  <button type="submit" class="vote-btn btn btn-danger btn-block" disabled>Vote to Eliminate</button>
                </form>
              <% } %>
            </div>
          </div>
        <% }) %>
      </div>
    <% } %>
    
    <!-- Host or Any Active Player Controls -->
    <% if (currentUserActive && allPlayersVoted && gameData.status === 'in-progress') { %>
      <div class="game-controls text-center mt-4 mb-4">
        <form action="/end-voting" method="POST">
          <input type="hidden" name="gameId" value="<%= gameData._id %>">
          <button type="submit" class="control-btn btn btn-primary btn-lg">End Voting & Continue</button>
        </form>
      </div>
    <% } %>
   
    <% if (playerHasVoted && !allPlayersVoted) { %>
      <div class="alert alert-info mt-4 text-center">
        <p class="mb-0">Waiting for all players to vote...</p>
      </div>
    <% } %>
   
    <% if (gameData.currentRound > 1 && gameData.eliminatedPlayers && gameData.eliminatedPlayers.length > 0) { %>
      <div class="alert alert-secondary mt-3">
        <p>Votes from previous round: </p>
        <ul class="vote-history">
          <% const prevRoundVotes = gameData.votes.filter(v => v.round === gameData.currentRound - 1) %>
          <% prevRoundVotes.forEach(vote => { %>
            <% const voter = gameData.players.find(p => p.userId.toString() === vote.voterId.toString()) %>
            <% const votedFor = gameData.players.find(p => p.userId.toString() === vote.votedForId.toString()) %>
            <li><%= voter ? voter.username : 'Unknown player' %> voted for <%= votedFor ? votedFor.username : 'Unknown player' %></li>
          <% }) %>
        </ul>
      </div>
    <% } %>
  <% } %>
 
  <div class="mt-4 text-center">
    <a href="/dashboard" class="btn btn-secondary">Back to Dashboard</a>
  </div>
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
    // Places to be updated
    const playerCont = document.getElementById('active-players') || document.getElementsByClassName('row')[0];
    
    const code = sessionStorage.getItem('gameId');
    const currentUsername = sessionStorage.getItem('username');
    const socket = io();
    let isEliminated = false;
    
    socket.emit('joinGame', code);
    
    // Handle new player joining
    socket.on('message', msg => {
      if (playerCont && !isEliminated) {
        const temp = document.createElement('div');
        temp.innerHTML = `<div class="col-md-4 mb-3" id="${msg}">
                            <div class="player-card">
                              <h4>${msg}</h4>
                              <form class="Elimi-form">
                                <input type="hidden" name="votedForId" value="${msg}">
                                <button type="submit" class="vote-btn btn btn-danger btn-block" disabled>Vote to Eliminate</button>
                              </form>
                            </div>
                          </div>`;
        playerCont.appendChild(temp.firstElementChild);
        
        // Add event listener to new vote button
        document.querySelector(`#${msg} .player-card .Elimi-form`).addEventListener("submit", function(event) {
            event.preventDefault();
            if (isEliminated) return; // Prevent eliminated players from voting
            
            const formData = new FormData(this);
            socket.emit("eliminate", formData.get("votedForId"));
            document.querySelectorAll(".vote-btn").forEach(button => {
              button.disabled = true;
            });
        });
      }
    });
   
    // Assign the user word
    socket.on('word', word => {
      if (!isEliminated) {
        let word_cont = document.getElementById("Player_word");
        if (word_cont) {
          word_cont.innerHTML = `<h4>Game Started</h4>
                                 <p>Your Word: <strong>${word}</strong></p>`;
        }
      }
    });
   
    // Show description from other players
    socket.on('description', desc => {
      if (!isEliminated) {
        const temp = document.createElement('div');
        temp.innerHTML = `<p>${desc}</p>`;
        const cluesContainer = document.getElementById('Clues');
        if (cluesContainer) {
          cluesContainer.appendChild(temp.firstChild);
        }
      }
    });
   
    // Show the form when it's your turn
    socket.on('myTurn', () => {
      if (isEliminated) return; // Eliminated players can't take turns
      
      let form_clue_cont = document.getElementById("clue_cont");
      if (form_clue_cont) {
        form_clue_cont.innerHTML = `<form id='form_clue'>
                                        <h3>Your Turn</h3>
                                        Description:
                                        <input type='text' id='clue' required>
                                        <button type='submit'>Submit</button>
                                    </form>`;
                                   
        // Submit the description to other players
        document.getElementById("form_clue").addEventListener("submit", function(event) {
            event.preventDefault();
            if (isEliminated) return;
            
            let clue = document.getElementById('clue').value;
            socket.emit('description', clue);
            this.remove();
        });
      }
    });
     
    // Enable voting
    socket.on('voteplayer', () => {
      if (isEliminated) return; // Eliminated players can't vote
      
      document.querySelectorAll('.vote-btn').forEach(button => {
          button.disabled = false;
          button.style.backgroundColor = 'green';
      });
    });
    
    // Handle voting form submission
    document.querySelectorAll(".Elimi-form").forEach(form => {
      form.addEventListener("submit", function(event) {
        event.preventDefault();
        if (isEliminated) return;
        
        const formData = new FormData(this);
        socket.emit("eliminate", formData.get("votedForId"));
        document.querySelectorAll(".vote-btn").forEach(button => {
          button.disabled = true;
        });
      });
    });
    
    // Handle player elimination
    socket.on('eliminated', eliminatedPlayer => {
      console.log(`${eliminatedPlayer} has been eliminated`);
      
      // Show status message
      const statusDiv = document.getElementById('status');
      if (statusDiv) {
        statusDiv.innerText = `${eliminatedPlayer} has been eliminated.`;
        statusDiv.style.display = 'block';
      }
      
      // Check if current user was eliminated
      if (eliminatedPlayer === currentUsername) {
        isEliminated = true;
        showEliminationMessage();
      } else {
        // Remove eliminated player's card
        const playerCard = document.getElementById(eliminatedPlayer);
        if (playerCard) {
          playerCard.remove();
        }
        socket.emit('removed', eliminatedPlayer);
      }
    });
    
    // Show elimination message and countdown
    function showEliminationMessage() {
      const overlay = document.getElementById('elimination-overlay');
      overlay.style.display = 'flex';
      
      let countdown = 5;
      const countdownElement = document.getElementById('countdown');
      
      const timer = setInterval(() => {
        countdown--;
        countdownElement.textContent = countdown;
        
        if (countdown <= 0) {
          clearInterval(timer);
          window.location.href = '/dashboard';
        }
      }, 1000);
    }
    
    // Handle next round
    socket.on('next_round', data => {
      if (!isEliminated) {
        let game_round = document.getElementById("game_status");
        if (game_round) {
          game_round.innerHTML = `GAME ROUND ${data.round}`;
        }
        
        // Clear clues for new round
        const cluesContainer = document.getElementById('Clues');
        if (cluesContainer) {
          cluesContainer.innerHTML = "";
        }
      }
    });
    
    // Handle alerts
    socket.on('alert', msg => {
      if (!isEliminated) {
        alert(msg);
      }
    });
   
    // Handle game over
    socket.on('game_over', ({ winner }) => {
      const gameOverDiv = document.getElementById('game-over-message');
      if (gameOverDiv) {
        gameOverDiv.innerHTML = `🎉 <strong>Game Over!</strong> <br> <strong>${winner.toUpperCase()}</strong> wins!`;
        gameOverDiv.style.display = 'block';
      }
     
      // Disable all voting
      document.querySelectorAll(".vote-btn").forEach(btn => btn.disabled = true);
      document.querySelectorAll(".Elimi-form").forEach(form => form.remove());
    });
       
</script>

<style>
.elimination-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.9);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 9999;
  animation: fadeIn 0.5s ease-in;
}

.elimination-message {
  background: linear-gradient(135deg, #dc3545, #c82333);
  color: white;
  padding: 40px;
  border-radius: 15px;
  text-align: center;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
  max-width: 500px;
  animation: slideIn 0.7s ease-out;
}

.elimination-icon {
  font-size: 4rem;
  margin-bottom: 20px;
  animation: pulse 2s infinite;
}

.elimination-message h2 {
  font-size: 2rem;
  font-weight: bold;
  margin-bottom: 15px;
  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
}

.elimination-timer {
  margin-top: 20px;
}

.elimination-timer button {
  margin-top: 15px;
  background-color: #fff;
  color: #dc3545;
  border: none;
  font-weight: bold;
}

.elimination-timer button:hover {
  background-color: #f8f9fa;
  transform: translateY(-2px);
}

@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

@keyframes slideIn {
  from { 
    opacity: 0;
    transform: translateY(-50px);
  }
  to { 
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes pulse {
  0%, 100% { transform: scale(1); }
  50% { transform: scale(1.1); }
}

.player-card {
  transition: all 0.3s ease;
}

.player-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}
</style>